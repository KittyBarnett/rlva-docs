{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to the RLVa Documentation! This resource is designed to provide a comprehensive guide for a diverse audience, including:</p> <ul> <li>Developers: Insights into the RLVa codebase, and other technical details.</li> <li>Scripters: A detailed reference of RLVa commands and syntax for integrating RLVa features into in-world scripts.</li> <li>End-users: Instructions and explanations on how to use RLVa functionality within viewers.</li> </ul>"},{"location":"#a-living-document","title":"A Living Document","text":"<p>This documentation is a work in progress and is being actively developed. As RLVa evolves and source code contributions are made to Linden Lab, this guide will grow and adapt to include the latest updates, features, and best practices.</p> <p>Whether you're a developer looking to contribute or maintain, a user exploring RLVa's functionality, or a scripter integrating RLVa into your projects, this documentation will serve as your guide. Please be patient as this resource is built, and feel free to contribute to its growth by sharing feedback or participating in the development.</p> <p>Thank you for your interest in RLVa!</p>"},{"location":"commands/version_reply/","title":"<code>@version</code>","text":"<p>Description: Returns the RLV and RLVa version that the viewer is using on the specified channel.</p> <p>Syntax:</p> <pre><code>@version=&lt;channel&gt;\n</code></pre> <p>Parameters:</p> <ul> <li>none</li> </ul> <p>Notes: This was the original command for retrieving the RLV version, but it's now deprecated due to restrictions on using Linden Lab-owned trademarks by external parties. While it remains functional for compatibility, it's recommended that new scripts use <code>@versionnew</code> instead.</p> <p>Example Output: </p> <pre><code>RestrainedLife viewer v4.0.0 (RLVa 3.0.0)\n</code></pre> <p>Related Commands: </p> <ul> <li> <p><code>@versionnew</code></p> </li> <li> <p><code>@versionnum</code></p> </li> </ul>"},{"location":"commands/versionnew_reply/","title":"<code>@versionnew</code>","text":"<p>Description: Returns the RLV and RLVa version on the specified channel, but in a way that complies with LL's trademark policies.</p> <p>Syntax:</p> <pre><code>@versionnew=&lt;channel&gt;\n</code></pre> <p>Parameters:</p> <ul> <li>none</li> </ul> <p>Notes: This is the preferred command moving forward. For more info, see the notes for <code>@version</code>.</p> <p>Example Output: </p> <pre><code>RestrainedLove viewer v4.0.0 (RLVa 3.0.0)\n</code></pre> <p>Related Commands: </p> <ul> <li> <p><code>@version</code></p> </li> <li> <p><code>@versionnum</code></p> </li> </ul>"},{"location":"commands/versionnum_reply/","title":"<code>@versionnum</code>","text":"<p>Description: Returns the RLV version the viewer supports in a script-friendly format of . <p>Syntax:</p> <pre><code>@version[:impl]=&lt;channel&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>impl</code>: When 'impl' is passed as an option, the viewer will return the RLVa implementation version instead.</li> </ul> <p>Example Output: </p> <pre><code>4000000\n</code></pre> <p>Related Commands: </p> <ul> <li> <p><code>@version</code></p> </li> <li> <p><code>@versionnew</code></p> </li> </ul>"},{"location":"development/layout/","title":"Layout","text":"<p>[DRAFT]</p>"},{"location":"development/layout/#code-documentation","title":"Code documentation","text":"<p>The RLVa code is organized into several key files and classes, each serving a specific role in integrating RLV functionality into the viewer. Below is an overview of the file layout and the purpose of each component.</p>"},{"location":"development/layout/#file-layout","title":"File Layout","text":""},{"location":"development/layout/#rlvdefinesh","title":"<code>rlvdefines.h</code>","text":"<p>This header file contains all the preprocessor defines, constants, and enumerations used throughout the RLVa code and the general viewer.</p>"},{"location":"development/layout/#rlvactionsh-rlvactionscpp","title":"<code>rlvactions.h</code> / <code>rlvactions.cpp</code>","text":"<p>The RlvActions class serves as the preferred interface for interacting with RLVa. It provides a comprehensive set of methods that allow developers to perform RLV checks and actions without delving into the underlying complexities of the RLV specificiation or implementation.</p> <p>When integrating RLV checks or actions into new features, utilize its methods to ensure consistency and avoid dealing with low-level implementation details</p>"},{"location":"development/layout/#rlvcommonh-rlvcommoncpp","title":"<code>rlvcommon.h</code> / <code>rlvcommon.cpp</code>","text":"<p>These files contain utility functions and classes that are utilized by both the RLVa code and the broader viewer codebase.</p>"},{"location":"development/layout/#rlvfloatersh-rlvfloaterscpp","title":"<code>rlvfloaters.h</code> / <code>rlvfloaters.cpp</code>","text":"<p>These contain the code for the various RLVa floaters.</p>"},{"location":"development/layout/#rlvhelperh-rlvhelpercpp","title":"<code>rlvhelper.h</code> / <code>rlvhelper.cpp</code>","text":"<p>These files contain utility functions and classes used exclusively by the RLVa code, specifically within rlvhandler.cpp, rlvinventory.cpp, and rlvui.cpp. They are not intended for use outside of these components.</p>"},{"location":"development/layout/#rlvhandlerh-rlvhandlercpp","title":"<code>rlvhandler.h</code> / <code>rlvhandler.cpp</code>","text":"<p>This is the main entry point for incoming RLV commands. The handler is responsible for interpreting and executing commands received from in-world objects or scripts, altering the viewer's behavior as dictated by the RLV protocol.</p>"},{"location":"development/tests/RLVa-001/","title":"RLVa 001","text":""},{"location":"development/tests/RLVa-001/#if-rlv-is-disabled-then-logging-in-performing-everyday-actions-and-closing-the-viewer-should-not-trigger-an-assertion-failure","title":"If RLV is disabled then logging in, performing everyday actions and closing the viewer should not trigger an assertion failure.","text":"<p>Preconditions:</p> <ul> <li> <p>The <code>RestrainedLove</code> debug setting was set to <code>FALSE</code> at the log-in screen.</p> </li> <li> <p>The user is logged into Second Life.</p> </li> </ul> <p>Test Steps:</p> <ol> <li> <p>Action: Perform some regular actions such as switching outfits, teleporting, editing an object, ...</p> </li> <li> <p>Action: Close the viewer</p> </li> </ol> <p>Expected Results: The viewer should close as normal with no error messages displayed.</p> <p>Notes: If RLV code runs without the appropriate 'is enabled' checks, eventually an instance of RlvHandler will be created which will trigger an assertion when the viewer is closed. </p>"},{"location":"development/tests/RLVa-002/","title":"RLVa 002","text":""},{"location":"development/tests/RLVa-002/#verify-that-basic-reply-commands-such-as-version-versionnew-and-versionnum-command-return-the-expected-result","title":"Verify that basic reply commands such as @version, @versionnew and @versionnum command return the expected result.","text":"<p>Preconditions:</p> <ul> <li> <p>The <code>RestrainedLove</code> debug setting was set to <code>TRUE</code> at the log-in screen.</p> </li> <li> <p>The user is logged into Second Life.</p> </li> </ul> <p>Test Steps:</p> <ol> <li>Action: Create an object with the following script:</li> </ol> <pre><code>// RLVa Integration Test Script\n// This script tests the @version, @versionnew, and @versionnum commands.\n\ninteger gChannel = 1234;\ninteger gState = 0;\n\ndefault\n{\n    state_entry()\n    {\n        llOwnerSay(\"TST: Starting RLVa integration test...\");\n\n        // Set up listener on the specified channel\n        llListen(gChannel, \"\", \"\", \"\");\n\n        // Send the first command\n        llOwnerSay(\"@version=\" + (string)gChannel);\n        llOwnerSay(\"TST: Sent @version command.\");\n    }\n\n    listen(integer channel, string name, key id, string message)\n    {\n        if (channel == gChannel)\n        {\n            if (gState == 0)\n            {\n                llOwnerSay(\"TST: Received reply to @version: \" + message);\n\n                // Validate the message format for @version\n                if (llSubStringIndex(message, \"RestrainedLife viewer v\") == 0)\n                {\n                    llOwnerSay(\"\u2714\ufe0f @version output format is correct.\");\n                    gState = 1;\n                    llOwnerSay(\"\u2714\ufe0f @version test passed.\");\n\n                    // Send the next command\n                    llOwnerSay(\"@versionnew=\" + (string)gChannel);\n                    llOwnerSay(\"TST: Sent @versionnew command.\");\n                }\n                else\n                {\n                    llOwnerSay(\"\u274c Error: @version output format is incorrect.\");\n                }\n            }\n            else if (gState == 1)\n            {\n                llOwnerSay(\"TST: Received reply to @versionnew: \" + message);\n\n                // Validate the message format for @versionnew\n                if (llSubStringIndex(message, \"RestrainedLove viewer v\") == 0)\n                {\n                    llOwnerSay(\"\u2714\ufe0f @versionnew output format is correct.\");\n                    gState = 2;\n                    llOwnerSay(\"\u2714\ufe0f @versionnew test passed.\");\n\n                    // Send the final command\n                    llOwnerSay(\"@versionnum=\" + (string)gChannel);\n                    llOwnerSay(\"TST: Sent @versionnum command.\");\n                }\n                else\n                {\n                    llOwnerSay(\"\u274c Error: @versionnew output format is incorrect.\");\n                }\n            }\n            else if (gState == 2)\n            {\n                llOwnerSay(\"TST: Received reply to @versionnum: \" + message);\n\n                // Validate the message format for @versionnum\n                if ((string)((integer)message) == message)\n                {\n                    llOwnerSay(\"\u2714\ufe0f @versionnum output format is correct.\");\n                    llOwnerSay(\"\u2714\ufe0f @versionnum test passed.\");\n                    llOwnerSay(\"\u2714\ufe0f All tests passed successfully.\");\n                }\n                else\n                {\n                    llOwnerSay(\"\u274c TST: Error: @versionnum output format is incorrect.\");\n                }\n            }\n        }\n    }\n}\n</code></pre> <p></p> <ol> <li>Action: Click the test object</li> </ol> <p>Expected Results:</p> <pre><code>Object: TST: Starting RLVa integration test...\nObject: TST: Sent @version command.\nObject: TST: Received reply to @version: RestrainedLife viewer v4.0.0 (RLVa 3.0.0)\nObject: \u2714\ufe0f @version output format is correct.\nObject: \u2714\ufe0f @version test passed.\nObject: TST: Sent @versionnew command.\nObject: TST: Received reply to @versionnew: RestrainedLove viewer v4.0.0 (RLVa 3.0.0)\nObject: \u2714\ufe0f @versionnew output format is correct.\nObject: \u2714\ufe0f @versionnew test passed.\nObject: TST: Sent @versionnum command.\nObject: TST: Received reply to @versionnum: 4000000\nObject: \u2714\ufe0f @versionnum output format is correct.\nObject: \u2714\ufe0f @versionnum test passed.\nObject: \u2714\ufe0f All tests passed successfully.\n</code></pre> <p>Notes: []</p>"},{"location":"development/tests/RLVa-003/","title":"RLVa 003","text":""},{"location":"development/tests/RLVa-003/#verify-that-the-rlva-console-is-working-correctly","title":"Verify that the RLVa console is working correctly","text":"<p>Preconditions:</p> <ul> <li> <p>The <code>RestrainedLove</code> debug setting was set to <code>TRUE</code> at the log-in screen.</p> </li> <li> <p>The user is logged into Second Life.</p> </li> </ul> <p>Test Steps:</p> <ol> <li> <p>Action: Open the console using the RLVa menu \u2192 Console...Expected Result: The console floater should open.</p> </li> <li> <p>Action: Enter a reply command, such as <code>@version=0</code>, and hit enter</p> </li> </ol> <p>Expected Results: The entered command should be visible in the console, as well as the RLV response. </p> <p>Notes: []</p>"},{"location":"features/console/","title":"Console","text":"<p>The console is a handy tool built right into RLVa that allows you to easily execute RLV commands without needing to write any scripts.</p> <p></p>"},{"location":"features/console/#how-to-access-the-rlva-console","title":"How to Access the RLVa Console","text":"<p>To open the console, go to the RLVa menu and select 'Console...'.</p>"},{"location":"features/console/#executing-commands","title":"Executing Commands","text":"<p>Commands in the console are executed as if your avatar is the object issuing them. This means that commands affecting the issuer (e.g., <code>@detach=n</code>) will not work. Don't worry if this seems unclear at first.</p> <p>You can set restrictions in the console (e.g., <code>@tploc=n</code>), and they will remain active as long as the console is open. In other words, all restrictions are cleared when you close the console.</p> <p>Some RLV commands return a reply after execution. Normally, these replies are sent on a channel that only scripts can listen to. However, by using channel '0', you can have the reply displayed directly in the console (as shown in the screenshot).</p>"},{"location":"technical/command_syntax/","title":"Command syntax","text":"<p>[DRAFT]</p> <p>An RLV command follows a specific syntax, which can be broken down into three main parts:</p> <p><code>@&lt;behaviour&gt;[:&lt;option&gt;]=&lt;type&gt;</code></p> <ul> <li><code>behaviour</code> and <code>type</code> are always required regardless of the specific command.</li> <li><code>option</code> depends on the specific command being executed (and could be optional).</li> </ul> <p>Multiple commands can be chained using the <code>,</code> separator. This is generally encouraged, especially for any 'force commands' that affect the avatar's appearance.</p>"},{"location":"technical/command_syntax/#behaviour","title":"Behaviour","text":"<p>The behaviour defines what you want to influence.</p>"},{"location":"technical/command_syntax/#option","title":"Option","text":"<p>The option is context-dependent on the behaviour that precedes it. Refer to a command's documentation for specifics.</p>"},{"location":"technical/command_syntax/#command-types","title":"Command types","text":"<p>There are three main forms of RLV commands:</p> <ol> <li>Restrictions (aka add/remove commands)</li> <li>Actions (aka force commands)</li> <li>Queries (aka reply commands)</li> </ol>"},{"location":"technical/command_syntax/#example-of-a-command","title":"Example of a Command","text":"<p>A command is a combination of a behaviour and a type. For instance, the behaviour <code>remoutfit</code> can be used as both a restriction (preventing the avatar from taking off clothing layers) or as an action (taking off all of an avatar's clothing layers).</p>"},{"location":"technical/command_syntax/#restrictions","title":"Restrictions","text":"<p>Restrictions generally prevent an avatar from doing something they would normally be able to do. They are ongoing effects that last until explicitly removed. An example of a restriction is preventing teleportation via the world map.</p> <p>Restrictions can be added using the <code>=n</code> or <code>=add</code> syntax and removed using <code>=y</code> or <code>=rem</code>. These are interchangeable.</p>"},{"location":"technical/command_syntax/#examples","title":"Examples:","text":"<ul> <li><code>@detach=n</code> and <code>@detach=add</code> are synonyms.</li> <li><code>@remoutfit=n,remoutfit=rem</code> first sets the <code>remoutfit</code> behaviour and then immediately removes it again.</li> </ul> <p>While scripts are used to set and unset restrictions, the restriction itself is associated with the object the script is in. If a linkset contains two objects, each with its own script, both can independently add or remove the same restriction without affecting the other. However, two scripts in the same object will share restrictions and may undo each other's restrictions.</p> <p>Scripts can only affect behaviours held by the object they are in and cannot undo a restriction set by another object.</p>"},{"location":"technical/command_syntax/#actions","title":"Actions","text":"<p>Actions are one-time commands that affect the avatar or their viewer in some way (e.g., force-sitting an avatar onto a specific object).</p>"},{"location":"technical/command_syntax/#queries","title":"Queries","text":"<p>Queries are commands used by scripts to retrieve information from RLV (e.g., to enumerate over <code>#RLV</code> shared inventory folders).</p>"}]}